# -*- coding: utf-8 -*-
"""naive_bayes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-_f97oeCkEYH_s74Kk2h8Wjl7rQPBrqx
"""

#-------------------------------------------------------------------------
# AUTHOR: Kaitlin Yen
# FILENAME: naive_bayes.py
# SPECIFICATION: derive classification probability based on naive bayes
# FOR: CS 4210- Assignment #2
# TIME SPENT: 7 hours
#-----------------------------------------------------------*/

#IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH AS numpy OR pandas. You have to work here only with standard
# dictionaries, lists, and arrays

#Importing some Python libraries
from sklearn.naive_bayes import GaussianNB
import csv

db = []
#Reading the training data in a csv file
with open('weather_training.csv', 'r') as csvfile:
  reader = csv.reader(csvfile)
  for i, row in enumerate(reader):
      if i > 0: #skipping the header
         db.append(row)

#Transform the original training features to numbers and add them to the 4D array X.
#For instance Sunny = 1, Overcast = 2, Rain = 3, X = [[3, 1, 1, 2], [1, 3, 2, 2], ...]]
#Transform the original training classes to numbers and add them to the vector Y.
#For instance Yes = 1, No = 2, so Y = [1, 1, 2, 2, ...]

#Categories values
category_map = {
    "Sunny": 1, "Overcast": 2, "Rain": 3,
    "Hot": 1, "Mild": 2, "Cool": 3,
    "High": 1, "Normal": 2,
    "Strong": 1, "Weak": 2,
    "Yes": 1, "No": 2
}

X = []
Y = []

for row in db:
  X.append([category_map[val] for val in row[1:5]])
  Y.append(category_map[row[5]])

#Fitting the naive bayes to the data
clf = GaussianNB(var_smoothing=1e-9)
clf.fit(X, Y)

#Reading the test data in a csv file
db_test = []
with open('weather_test.csv', 'r') as csvfile:
  reader = csv.reader(csvfile)
  for i, row in enumerate(reader):
      if i > 0: #skipping the header
         db_test.append(row)
      else:
        print(f"{row[0]:<15}{row[1]:<15}{row[2]:<15}{row[3]:<15}{row[4]:<15}{row[5]:<15}{'Confidence':<15}")
        print("=" * 7 * 15)

#Printing the header as the solution
for i, row in enumerate(db_test):
    test_sample = [category_map[val] for val in row[1:5]]  # Correcting source of test data

    # Make probabilistic predictions
    probabilities = clf.predict_proba([test_sample])[0]

    # Determine classification and confidence
    if max(probabilities) >= 0.75:
        playTennis = "Yes" if probabilities[0] > probabilities[1] else "No"
        confidence = max(probabilities)  # Highest probability

        # Print results
        print(f"{row[0]:<15}{row[1]:<15}{row[2]:<15}{row[3]:<15}{row[4]:<15}{playTennis:<15}{confidence:<15.3f}")