# -*- coding: utf-8 -*-
"""knn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NZcphOFpz4Aoz0CcUciwKFikKwSZCae9
"""

#-------------------------------------------------------------------------
# AUTHOR: Kaitlin Yen
# FILENAME: knn.py
# SPECIFICATION: find the k-nearest neighbors given a dataset
# FOR: CS 4210- Assignment #2
# TIME SPENT: 7 hours
#-----------------------------------------------------------*/

#IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH AS numpy OR pandas. You have to work here only with standard vectors and arrays

#Importing some Python libraries
from sklearn.neighbors import KNeighborsClassifier
import csv

db = []
classification = {'ham': 0, 'spam': 1}

#Reading the data in a csv file
with open('email_classification.csv', 'r') as csvfile:
  reader = csv.reader(csvfile)
  for i, row in enumerate(reader):
      if i > 0: #skipping the header
         db.append (row)

#Loop your data to allow each instance to be your test set
false_prediction = 0
for i in range(len(db)):

    #Add the training features to the 20D array X removing the instance that will be used for testing in this iteration.
    #For instance, X = [[1, 2, 3, 4, 5, ..., 20]].
    #Convert each feature value to float to avoid warning messages

    #Transform the original training classes to numbers and add them to the vector Y.
    #Do not forget to remove the instance that will be used for testing in this iteration.
    #For instance, Y = [1, 2, ,...].
    #Convert each feature value to float to avoid warning messages

    X = []
    Y = []

    for idx, row in enumerate(db):
        if idx != i:
            X.append(list(map(float, row[:20])))
            Y.append(classification[row[20]])

    #Store the test sample of this iteration in the vector testSample
    testSample = list(map(float, db[i][:20]))
    true_label = classification[db[i][20]]

    #Fitting the knn to the data
    clf = KNeighborsClassifier(n_neighbors=1, p=2)
    clf = clf.fit(X, Y)

    #Use your test sample in this iteration to make the class prediction. For instance:
    #class_predicted = clf.predict([[1, 2, 3, 4, 5, ..., 20]])[0]
    class_predicted = clf.predict([testSample])[0]


    #Compare the prediction with the true label of the test instance to start calculating the error rate.
    if class_predicted != true_label:
        false_prediction += 1

#Print the error rate
print("error rate: " + str(false_prediction / len(db)))