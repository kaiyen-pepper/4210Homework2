# -*- coding: utf-8 -*-
"""decision_tree_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l6UnQ0O9K0LVfftWED8w6Mk5vgnJPC3x
"""

#-------------------------------------------------------------------------
# AUTHOR: Kaitlin Yen
# FILENAME: decision_tree_2.py
# SPECIFICATION: create a decision tree based on three datasets given
# FOR: CS 4210- Assignment #2
# TIME SPENT: 7 hours
#-----------------------------------------------------------*/

#IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH AS numpy OR pandas. You have to work here only with standard
# dictionaries, lists, and arrays

#Importing some Python libraries
from sklearn import tree
import csv

dataSets = ['contact_lens_training_1.csv', 'contact_lens_training_2.csv', 'contact_lens_training_3.csv']

# Key Values Mapping
age_mapping = {"Young": 1, "Prepresbyopic": 2, "Presbyopic": 3}
prescription_mapping = {"Myope": 1, "Hypermetrope": 0}
astigmatism_mapping = {"Yes": 1, "No": 0}
tear_mapping = {"Normal": 1, "Reduced": 0}
recommended_mapping = {"Yes": 1, "No": 2}

for ds in dataSets:

    dbTraining = []
    X = []
    Y = []

    #Reading the training data in a csv file
    with open(ds, 'r') as csvfile:
         reader = csv.reader(csvfile)
         for i, row in enumerate(reader):
             if i > 0: #skipping the header
                dbTraining.append(row)

    #Transform the original categorical training features to numbers and add to the 4D array X.
    #Transform the original categorical training classes to numbers and add to the vector Y.
    for row in dbTraining:
        X.append([
            age_mapping[row[0]],
            prescription_mapping[row[1]],
            astigmatism_mapping[row[2]],
            tear_mapping[row[3]]
        ])
        Y.append(recommended_mapping[row[4]])

    #Loop your training and test tasks 10 times here
    #average finds the average accuracy for each set
    average = []
    for i in range(10):

       #Fitting the decision tree to the data setting max_depth=5
       clf = tree.DecisionTreeClassifier(criterion='entropy', max_depth=5)
       clf = clf.fit(X, Y)

       #Read the test data and add this data to dbTest
       dbTest = []
       test_X = []
       test_Y = []
       true_prediction = 0

       with open('contact_lens_test.csv', 'r') as csvfile:
         reader = csv.reader(csvfile)
         for i, row in enumerate(reader):
             if i > 0: #skipping the header
                dbTest.append(row)

       for data in dbTest:
           #Transform the features of the test instances to numbers following the same strategy done during training,
           #and then use the decision tree to make the class prediction.
           transformed_row = [
               age_mapping[data[0]],
               prescription_mapping[data[1]],
               astigmatism_mapping[data[2]],
               tear_mapping[data[3]]
           ]
           test_X.append(transformed_row)
           test_Y.append(recommended_mapping[data[4]])

           class_predicted = clf.predict([transformed_row])[0]

           #Compare the prediction with the true label (located at data[4]) of the test instance to start calculating the accuracy.
           if class_predicted == recommended_mapping[data[4]]:
               true_prediction += 1

       #Find the average of this model during the 10 runs (training and test set)
       average.append(true_prediction / len(dbTest))

    #Print the average accuracy of this model during the 10 runs (training and test set).
    #Your output should be something like that: final accuracy when training on contact_lens_training_1.csv: 0.2
    avr_accuracy = sum(average) / len(average)
    print("Final accuracy when training on " + ds + ": " + str(avr_accuracy))